name: CI/CD Deployment Pipeline Bump

on:
  workflow_dispatch:
  # push:
  #   branches:
  #     - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      - name: Build
        run: |
          npm install
          npm run build
          zip -r build.zip .
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build.zip

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Get version from package.json
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Release Staging Build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NOTE: "Staging release for version ${{ env.VERSION }}"
        run: |
          TAG="staging-v${{ env.VERSION }}"
          echo "Using tag: $TAG"
          gh release delete "$TAG" -y || true
          gh release create "$TAG" build.zip --notes "$NOTE"

  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact


      - name: Determine version bump
        id: bump-type
        run: |
          msg=$(git log -1 --pretty=%B)
          echo "Last commit message: $msg"

          if [[ "$msg" == *"BREAKING CHANGE"* ]] || [[ "$msg" == *"refactor!"* ]]; then
            echo "BUMP=major" >> $GITHUB_ENV
          elif [[ "$msg" == feat:* ]]; then
            echo "BUMP=minor" >> $GITHUB_ENV
          else
            echo "BUMP=patch" >> $GITHUB_ENV
          fi

      - name: Auto bump version
        id: bump
        run: |
          current=$(node -p "require('./package.json').version")
          echo "Current version: $current"

          npm version $BUMP --no-git-tag-version
          new=$(node -p "require('./package.json').version")
          echo "New version: $new"

          echo "VERSION=$new" >> $GITHUB_ENV

      - name: Commit bumped version
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json package.json || true
          git commit -m "ci: bump $BUMP version to v${{ env.VERSION }}" || echo "No changes to commit"
          git push origin master

      - name: Get version from package.json
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Release Production Build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NOTE: "Production release v${{ env.VERSION }} ($BUMP)"
        run: |
          TAG="prod-v${{ env.VERSION }}"
          echo "Using tag: $TAG"
          gh release delete "$TAG" -y || true
          gh release create "$TAG" build.zip --notes "$NOTE"
          