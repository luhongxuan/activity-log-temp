name: CI/CD Deployment Pipeline Test Coverage

on:
  workflow_dispatch:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      - name: Build
        run: |
          npm install
          npm run build
          zip -r build.zip .
      - uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build.zip

  test-unit:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install pytest + coverage
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov

      - name: Run Unit Tests with Coverage
        env:
          TEST_ENV: unit
        run: |
          echo "Running Unit Tests (TEST_ENV=$TEST_ENV)..."
          pytest tests --cov=. --cov-report=xml --cov-report=html

      - name: Upload Coverage Reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/

  test-integration:
    needs: test-unit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Run Integration Tests
        env:
          TEST_ENV: staging
        run: python tests/test_integration.py

  deploy-staging:
    needs: [test-unit, test-integration]
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: build-artifact
      - name: Get version
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Release Staging Build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NOTE: "Staging release for version ${{ env.VERSION }}"
        run: |
          TAG="staging-v${{ env.VERSION }}"
          gh release delete "$TAG" -y || true
          gh release create "$TAG" build.zip --notes "$NOTE"

  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: build-artifact
      - name: Get version
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Release Production Build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NOTE: "Production release for version ${{ env.VERSION }}"
        run: |
          TAG="prod-v${{ env.VERSION }}"
          gh release delete "$TAG" -y || true
          gh release create "$TAG" build.zip --notes "$NOTE"